package Day2;

import java.util.*;  
class AL1{  
   public static void main(String args[]){  
      ArrayList<String> alist=new ArrayList<String>();  
      alist.add("Steve");
      alist.add("Tim");
      alist.add("Lucy");
      alist.add("Pat");
      alist.add("Tom");
       //displaying elements
      System.out.println(alist);
      //Adding "Steve" at the fourth position
      alist.add(3, "Steve");
      //displaying elements
      System.out.println(alist);
   }  
}








package Day2;

import java.util.*;  
class AL1{  
   public static void main(String args[]){  
      ArrayList<String> alist=new ArrayList<String>();  
      alist.add("Steve");
      alist.add("Tim");
      alist.add("Lucy");
      alist.add("Pat");
      alist.add("Tom");
       //displaying elements
      System.out.println(alist);
      //Adding "Steve" at the fourth position
      alist.add(3, "Steve");
      //displaying elements
      System.out.println("Post adding at 3rd index\n" + alist);
      alist.remove(1);
      System.out.println("Post removing at 1st postion\n" + alist);
   }  
}



package Day2;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class LL1 {
	public static void main(String[] args) {
		// Creating a LinkedList
		LinkedList<String> friends = new LinkedList<>();
		// Adding new elements to the end of the LinkedList using add() method.
		friends.add("Rajeev");
		friends.add("John");
		friends.add("David");
		friends.add("Chris");
		System.out.println("Initial LinkedList : " + friends);
		friends.add(3, "Lisa"); // Adding at the specified position in the LinkedList
		System.out.println("After add(3, \"Lisa\") : " + friends);
		friends.addFirst("Steve"); // Adding an element at the beginning of the LinkedList
		System.out.println("After addFirst(\"Steve\") : " + friends);
		friends.addLast("Jennifer"); // Add at end of the LinkedList (equivalent to the add() )
		System.out.println("After addLast(\"Jennifer\") : " + friends);
		List<String> familyFriends = new ArrayList<>();
		familyFriends.add("Jesse");
		familyFriends.add("Walt");
		friends.addAll(familyFriends);
		System.out.println("After addAll(familyFriends) : " + friends);
	}
}






package Day2;

import java.util.*;

public class IterEG {
	public static void main(String args[]) {
		ArrayList<String> al = new ArrayList<>();
		al.add("C");
		al.add("A");
		al.add("E");
		al.add("B");
		al.add("D");
		System.out.print("Original contents of al: ");
		Iterator<String> itr = al.iterator();
		while (itr.hasNext()) {
			Object element = itr.next();
			System.out.print(element + " ");
		}
		System.out.println();
		ListIterator<String> litr = al.listIterator();
		while (litr.hasNext()) {
			Object element = litr.next();
			litr.set(element + "+");
		}
		System.out.print("Modified contents of al: ");
		itr = al.iterator();
		while (itr.hasNext()) {
			Object element = itr.next();
			System.out.print(element + " ");
		}
		System.out.println();
		System.out.print("Modified list backwards: ");
		while (litr.hasPrevious()) { // Now, display the list backwards
			Object element = litr.previous();
			System.out.print(element + " ");
		}
		System.out.println();
	}
}



package Day2;

import java.util.Vector;

public class VectorEg {
	public static void main(String a[]) {
		Vector<String> vct = new Vector<String>();
		vct.add("First");
		vct.add("Second");
		vct.add("Third");
		System.out.println(vct);
		vct.add(2, "Random"); // adding element at specified index
		System.out.println(vct);
		System.out.println("Element at index 3 is: " + vct.get(3)); // getting ele by index
		System.out.println("The first element of this vector is: " + vct.firstElement());
		System.out.println("The last element of this vector is: " + vct.lastElement());
		System.out.println("Is this vector empty? " + vct.isEmpty());
		System.out.println("Size Of Vector " + vct.size());
		System.out.println("Max Size Of Vector " + vct.capacity());
	}
}












package Day2;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;

public class QueueEg {
	public static void main(String[] args) {
		Queue<String> qe = new LinkedList<String>();
		qe.add("b");
		qe.add("a");
		qe.add("c");
		qe.add("e");
		qe.add("d");
		Iterator<String> it = qe.iterator();
		System.out.println("Initial Size of Queue :" + qe.size());
		while (it.hasNext()) {
			String iteratorValue = (String) it.next();
			System.out.println("Queue Next Value :" + iteratorValue);
		}
		System.out.println("Queue peek :" + qe.peek()); // get value and does not remove element from queue
		System.out.println("Queue poll :" + qe.poll()); // get first value and remove that object from queue
		System.out.println("Final Size of Queue :" + qe.size());
	}
}





package Day2;

import java.util.Stack;

public class StackExample {
	public static void main(String[] args) {
		// Creating a Stack
		Stack<String> stackOfCards = new Stack<>();
		// Pushing new items to the Stack
		stackOfCards.push("Jack");
		stackOfCards.push("Queen");
		stackOfCards.push("King");
		stackOfCards.push("Ace");
		System.out.println("Stack => " + stackOfCards);
		System.out.println();
		// Popping items from the Stack
		String cardAtTop = stackOfCards.pop(); // Throws EmptyStackException if the stack is empty
		System.out.println("Stack.pop() => " + cardAtTop);
		System.out.println("Current Stack => " + stackOfCards);
		System.out.println();
		// Get the item at the top of the stack without removing it
		cardAtTop = stackOfCards.peek();
		System.out.println("Stack.peek() => " + cardAtTop);
		System.out.println("Current Stack => " + stackOfCards);
	}
}






package Day2;

import java.util.*;

public class SetEg {
	public static void main(String[] args) {
		int count[] = { 34, 22, 10, 60, 30, 22 };
		System.out.print("The array: ");
		for (int i : count)
			System.out.print(i + ", ");
		System.out.println();
		Set<Integer> set = new HashSet<Integer>();
		for (int i = 0; i < 5; i++) {
			set.add(count[i]);
		}
		Set<Integer> setLL = new LinkedHashSet<Integer>();
		for (int i = 0; i < 5; i++) {
			setLL.add(count[i]);
		}
		System.out.println("The Set: \n" + set);
		System.out.println("The Input wise Ordered Set: \n" + setLL);
		TreeSet<Integer> sortedSet = new TreeSet<Integer>(set);
		System.out.println("The sorted list is:");
		System.out.println(sortedSet);
		System.out.println("The First element of the set is: " + (Integer) sortedSet.first());
		System.out.println("The last element of the set is: " + (Integer) sortedSet.last());
	}
}







package Day2;

import java.util.*;

public class SetEg {
	public static void main(String[] args) {
		int count[] = { 34, 22, 10, 60, 30, 22 };
		System.out.print("The array: ");
		for (int i : count)
			System.out.print(i + ", ");
		System.out.println();
		Set<Integer> set = new HashSet<Integer>();
		for (int i = 0; i < 5; i++) {
			set.add(count[i]);
		}
		Set<Integer> setLL = new LinkedHashSet<Integer>();
		for (int i = 0; i < 5; i++) {
			setLL.add(count[i]);
		}
		System.out.println("The Set: \n" + set);
		System.out.println("The Input wise Ordered Set: \n" + setLL);
		TreeSet<Integer> sortedSet = new TreeSet<Integer>(set);
		System.out.println("The sorted list is:");
		System.out.println(sortedSet);
		System.out.println("The First element of the set is: " + (Integer) sortedSet.first());
		System.out.println("The last element of the set is: " + (Integer) sortedSet.last());
	}
}












package Day2;

import java.util.*;

public class MapEg {
	public static void main(String args[]) {
		Map<String, String> fruit = new HashMap<String, String>();
		fruit.put("Apple", "red");
		fruit.put("Pear", "yellow");
		fruit.put("Plum", "purple");
		fruit.put("Cherry", "red");
		fruit.put("Cherry", "deepred");
		System.out.println("Key Set: " + fruit.keySet());
		System.out.println("Value Collection: " + fruit.values());
		System.out.println("Each Entry Set: " + fruit.entrySet());
		System.out.println("\nThe Fruits are: ");
		for (String key : fruit.keySet()) {
			System.out.println(key + ": " + fruit.get(key));
		}
	}
}















package Day2.extras;

interface KingInderverma{
	void chotaBheem();
}

public class LambdaEg {
	class Indumati implements KingInderverma{  // LambdaEg$Indumati.class
		public void chotaBheem() {System.out.println("Fight");}
	}

	public static void main(String[] args) {
		
		KingInderverma k=new KingInderverma() {  //LambdaEg$1
			public void chotaBheem() {System.out.println("Fight");}
		};
		
		
		k.chotaBheem();
		
		
		KingInderverma k2=()->System.out.println("Fight");
		
		k2.chotaBheem();
		
		LambdaEg l=new LambdaEg();
		Indumati i=l.new Indumati();
		i.chotaBheem();

	}

}









package Day2.extras;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class StreamEg {

	public static void main(String[] args) {
		List<String> names= Arrays.asList("John","BAlaGuruSwamyIyyer","Aru","Zuber");
		names.stream().sorted().forEach(x->System.out.println(x));
		List<Integer> len=names.stream().map(x->x.length()).collect(Collectors.toList());
		System.out.println(len);
		
		
	}

}






package Day2.extras;
import java.util.function.*;

public class LambdaFnEg {

	public static void main(String[] args) {
		BiFunction<Integer, Integer, Integer> add=(x,y)-> x+y;
		BiFunction<Integer, Integer, Integer> sub=(x,y)-> x-y;
		System.out.println(add.apply(3,4));
		
		Predicate<Integer> grTh50= (x) -> x>50; 
		System.out.println(grTh50.test(100)); //true
		
		Consumer<String> print = (x) -> System.out.println(x);
		print.accept("Hi"); //Hi
		
		Supplier<Integer> give = () -> 100;
		System.out.println(give.get()); //100
		
		Function<String, Integer> lenn=(x)->x.length();
		
		System.out.println(lenn.apply("Hello World"));
		
		
		
	}

}






Predicate<T> -> Boolean test(T o)
Consumer<T> -> void accept(T o)
Supplier<T> -> T get()
Function<T, R> -> R apply(T o)














