<!DOCTYPE html>
<html>
<head>
  <title>Promise Resolve and Reject</title>
</head>
<body>

<h2>Click to test the Promise</h2>
<button onclick="testPromise(true)">Resolve</button>
<button onclick="testPromise(false)">Reject</button>

<p id="output"></p>

<script>
  function testPromise(shouldResolve) {
    document.getElementById("output").innerHTML = "⏳ Processing...";

    const myPromise = new Promise(function(resolve, reject) {
      setTimeout(function() {
        if (shouldResolve) {
          resolve("✅ Promise was resolved successfully!");
        } else {
          reject("❌ Promise was rejected due to an error.");
        }
      }, 2000); // simulate async operation
    });

    myPromise
      .then(function(result) {
        document.getElementById("output").innerHTML = result;
      })
      .catch(function(error) {
        document.getElementById("output").innerHTML = error;
      });
  }
</script>

</body>
</html>










<!DOCTYPE html>
<html>
<head>
  <title>Async/Await with Only Resolve</title>
</head>
<body>

<h2>Click the button to load message</h2>
<button onclick="loadData()">Load Data</button>

<p id="output"></p>

<script>
  // Simulated async operation that always resolves
  function fetchData() {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve("✅ Data loaded successfully! (No reject used)");
      }, 2000);
    });
  }

  // Async function using await (no error handling needed)
  async function loadData() {
    document.getElementById("output").innerHTML = "⏳ Loading...";
    const result = await fetchData();
    document.getElementById("output").innerHTML = result;
  }
</script>

</body>
</html>








<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Spread Operator with Button</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    button {
      margin: 10px 0;
      padding: 8px 16px;
      font-size: 16px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
    }
    button:hover {
      background-color: #0056b3;
    }
    pre {
      background-color: #f0f0f0;
      padding: 10px;
      border-radius: 8px;
      white-space: pre-wrap;
    }
    h2 {
      color: #0066cc;
    }
  </style>
</head>
<body>

  <h2>1️⃣ Array Update Using Spread Operator</h2>
  <button onclick="updateArray()">Update Array</button>
  <pre id="arrayOutput">Click the button to see updated array.</pre>

  <h2>2️⃣ Object Update Using Spread Operator</h2>
  <button onclick="updateObject()">Update Object</button>
  <pre id="objectOutput">Click the button to see updated object.</pre>

  <script>
    function updateArray() {
      const originalFruits = ["apple", "banana", "orange"];
      const updatedFruits = [...originalFruits, "mango", "grapes"];
      
      document.getElementById("arrayOutput").textContent =
        "Original Array:\n" + JSON.stringify(originalFruits, null, 2) +
        "\n\nUpdated Array:\n" + JSON.stringify(updatedFruits, null, 2);
    }

    function updateObject() {
      const car = {
        brand: "Toyota",
        model: "Corolla",
        color: "White",
        year: 2022
      };

      const updatedCar = {
        ...car,
        color: "Blue",    // update only color
        year: 2025        // update only year
      };

      document.getElementById("objectOutput").textContent =
        "Original Object:\n" + JSON.stringify(car, null, 2) +
        "\n\nUpdated Object:\n" + JSON.stringify(updatedCar, null, 2);
    }
  </script>

</body>
</html>









<!DOCTYPE html>
<html>
<head>
  <title>JavaScript Array Functions</title>
  <style>
    button {
      margin: 5px;
      padding: 10px;
      font-size: 14px;
    }
    #output {
      margin-top: 20px;
      padding: 10px;
      border: 1px solid #ddd;
      font-family: monospace;
      white-space: pre-wrap;
    }
  </style>
</head>
<body>

  <h2>JavaScript Array Methods Example</h2>
   <h3>const numbers = [1, 2, 3, 4, 5] </h3>

  <button onclick="useMap()">map()</button>
  <button onclick="useFilter()">filter()</button>
  <button onclick="useReduce()">reduce()</button>
  <button onclick="useForEach()">forEach()</button>
  <button onclick="useFind()">find()</button>
  <button onclick="useSome()">some()</button>
  <button onclick="useEvery()">every()</button>
  <button onclick="useFlatMap()">flatMap()</button>

  <div id="output">Click a button to see result here...</div>

  <script>
    const numbers = [1, 2, 3, 4, 5];

    function print(msg) {
      document.getElementById("output").textContent = msg;
    }

    function useMap() {
      const result = numbers.map(n => n * 2);
      print("numbers.map(n => n * 2): " + JSON.stringify(result));
    }

    function useFilter() {
      const result = numbers.filter(n => n % 2 === 0);
      print("numbers.filter(n => n % 2 === 0): " + JSON.stringify(result));
    }

    function useReduce() {
      const result = numbers.reduce((sum, n) => sum + n, 0);
      print("numbers.reduce((sum, n) => sum + n, 0): " + result);
    }

    function useForEach() {
      let output = "numbers.forEach(n => output += n + ' '): ";
      numbers.forEach(n => output += n + " ");
      print(output.trim());
    }

    function useFind() {
      const result = numbers.find(n => n > 3);
      print("numbers.find(n => n > 3): " + result);
    }

    function useSome() {
      const result = numbers.some(n => n > 4);
      print("numbers.some(n => n > 4): " + result);
    }

    function useEvery() {
      const result = numbers.every(n => n > 0);
      print("numbers.every(n => n > 0): " + result);
    }

    function useFlatMap() {
      const result = numbers.flatMap(n => [n, n * 10]);
      print("numbers.flatMap(n => [n, n * 10]): " + JSON.stringify(result));
    }
  </script>

</body>
</html>








