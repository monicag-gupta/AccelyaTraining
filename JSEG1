<!DOCTYPE html>
<html>
<head>
  <title>Promise Resolve and Reject</title>
</head>
<body>

<h2>Click to test the Promise</h2>
<button onclick="testPromise(true)">Resolve</button>
<button onclick="testPromise(false)">Reject</button>

<p id="output"></p>

<script>
  function testPromise(shouldResolve) {
    document.getElementById("output").innerHTML = "⏳ Processing...";

    const myPromise = new Promise(function(resolve, reject) {
      setTimeout(function() {
        if (shouldResolve) {
          resolve("✅ Promise was resolved successfully!");
        } else {
          reject("❌ Promise was rejected due to an error.");
        }
      }, 2000); // simulate async operation
    });

    myPromise
      .then(function(result) {
        document.getElementById("output").innerHTML = result;
      })
      .catch(function(error) {
        document.getElementById("output").innerHTML = error;
      });
  }
</script>

</body>
</html>










<!DOCTYPE html>
<html>
<head>
  <title>Async/Await with Only Resolve</title>
</head>
<body>

<h2>Click the button to load message</h2>
<button onclick="loadData()">Load Data</button>

<p id="output"></p>

<script>
  // Simulated async operation that always resolves
  function fetchData() {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve("✅ Data loaded successfully! (No reject used)");
      }, 2000);
    });
  }

  // Async function using await (no error handling needed)
  async function loadData() {
    document.getElementById("output").innerHTML = "⏳ Loading...";
    const result = await fetchData();
    document.getElementById("output").innerHTML = result;
  }
</script>

</body>
</html>












