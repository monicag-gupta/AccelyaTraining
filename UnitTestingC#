ManualUnitTesting



Program.cs

using System;

namespace ManualUnitTesting
{
    class Program
    {
        static int Add(int a, int b) => a + b;

        static void Main()
        {
            Console.WriteLine("Testing Add Method");
            Console.WriteLine(Add(2, 3) == 5 ? "Pass" : "Fail");
        }
    }
}







MS Tests:

Attribute
Purpose
[TestClass]
Marks a class as containing test methods.
[TestMethod]
Marks a method as a test.
[DataTestMethod]
Marks a method for data-driven testing.
[DataRow]
Provides input data for [DataTestMethod].
[TestInitialize]
Runs code before each test method.
[TestCleanup]
Runs code after each test method.
[ClassInitialize]
Runs once before all tests in the class.
[ClassCleanup]
Runs once after all tests in the class.
[Ignore]
Skips a test method.
[ExpectedException]
Indicates that a specific exception is expected.



Method
Description
Assert.AreEqual
Verifies that two values are equal.
Assert.AreNotEqual
Verifies that two values are not equal.
Assert.IsTrue
Verifies that a condition is true.
Assert.IsFalse
Verifies that a condition is false.
Assert.IsNull
Verifies that an object is null.
Assert.IsNotNull
Verifies that an object is not null.
Assert.ThrowsException
Verifies that a specific exception is thrown.






Create a MSTest Project in VS2022 : MSTestPrj
Create a static class to be tested: Calculator.cs
Calculator
Create the test classes: CalculatorTests.cs
CalculatorTests
CalculatorTests2
TestLifecycleExample
Build the Project
Go to top level Menu  -> Test -> Test Explorer
If the project is already build, we can see all tests here
Run or debug the tests to check them.





Calculator.cs

using System;

namespace MSTestPrj
{
    public static class Calculator
    {
        public static int Add(int a, int b) => a + b;
        public static int Subtract(int a, int b) => a - b;
    }

}






CalculatorTests.cs

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace MSTestPrj
{

    [TestClass]
    public class CalculatorTests
    {
        [TestMethod]
        public void Add_ShouldReturnCorrectSum()
        {
            int result = Calculator.Add(2, 3);
            Assert.AreEqual(5, result);
        }

        [TestMethod]
        public void Subtract_ShouldReturnCorrectDifference()
        {
            int result = Calculator.Subtract(5, 3);
            Assert.AreEqual(2, result);
        }
    }
    
    [TestClass]
    public class CalculatorTests2
    {
        [DataTestMethod]
        [DataRow(2, 3, 5)]
        [DataRow(-1, 1, 0)]
        [DataRow(0, 0, 0)]
        public void Add_ShouldReturnCorrectSum(int a, int b, int expected)
        {
            int result = Calculator.Add(a, b);
            Assert.AreEqual(expected, result);
        }
    }


    [TestClass]
    public class TestLifecycleExample
    {
        [ClassInitialize]
        public static void ClassInit(TestContext context)
        {
            // Runs once before all tests
        }

        [TestInitialize]
        public void TestInit()
        {
            // Runs before each test
        }

        [TestMethod]
        public void TestExample()
        {
            Assert.IsTrue(true);
        }

        [TestCleanup]
        public void TestCleanup()
        {
            // Runs after each test
        }

        [ClassCleanup]
        public static void ClassCleanup()
        {
            // Runs once after all tests
        }

        [TestMethod]
        public void AssertionsExample()
        {
            Assert.AreEqual(5, Calculator.Add(2, 3));
            int x = 0;
            Assert.ThrowsException<DivideByZeroException>(() => { int result = 1 / x; });
        }
    }
}







using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace MSTestPrj
{

    [TestClass]
    public class CalculatorTests
    {
        [TestMethod]
        public void Add_ShouldReturnCorrectSum()
        {
            int result = Calculator.Add(2, 3);
            Assert.AreEqual(5, result);
        }

        [TestMethod]
        public void Subtract_ShouldReturnCorrectDifference()
        {
            int result = Calculator.Subtract(5, 3);
            Assert.AreEqual(2, result);
        }
    }

    [TestClass]
    public class CalculatorTests2
    {
        [DataTestMethod]
        [DataRow(2, 3, 5)]
        [DataRow(-1, 1, 0)]
        [DataRow(0, 0, 0)]
        public void Add_ShouldReturnCorrectSum(int a, int b, int expected)
        {
            int result = Calculator.Add(a, b);
            Assert.AreEqual(expected, result);
        }
    }


    [TestClass]
    public class TestLifecycleExample
    {
        [ClassInitialize]
        public static void ClassInit(TestContext context)
        {
            Console.WriteLine("ClassInit: Before all tests");
        }

        [TestInitialize]
        public void TestInit()
        {
            Console.WriteLine("TestInit: Before each tests");
        }

        [TestMethod]
        public void TestExample()
        {
            Assert.IsTrue(true);
        }

        [TestCleanup]
        public void TestCleanup()
        {
            Console.WriteLine("TestCleanup: Post each tests");
        }

        [ClassCleanup]
        public static void ClassCleanup()
        {
            Console.WriteLine("ClassCleanup: Post all tests");
        }

        [TestMethod]
        public void AssertionsExample()
        {
            Assert.AreEqual(5, Calculator.Add(2, 3));
            int x = 0;
            Assert.ThrowsException<DivideByZeroException>(() => { int result = 1 / x; });
        }
    }
}






xUnit:

Attribute
Purpose
[Fact]
Marks a test method that does not take parameters.
[Theory]
Marks a test method with multiple data inputs.
[InlineData]
Provides input data for a [Theory] test.
[ClassData]
Provides complex input data from a class.


Method
Purpose
IClassFixture<T>
Shared setup/teardown for tests in a class.
IDisposable
Cleanup resources after a test class instance.




Feature
xUnit
MSTest
NUnit
Attributes
[Fact], [Theory]
[TestMethod]
[Test], [TestCase]
Dependency Injection
Supported
Not supported
Limited support
Parallel Execution
Built-in
Limited
Supported
Test Explorer Integration
Full
Full
Full






Create a xUnit Project in VS2022 : xUnitTestPrj
Create a static class to be tested: Calculator.cs
Calculator
ICalculator
Calculator2
Create the test classes: CalculatorTests.cs
CalculatorTests
CalculatorTests2
TestLifecycleExample
DatabaseTests
DatabaseFixture
Build the Project
Go to top level Menu  -> Test -> Test Explorer
If the project is already build, we can see all tests here
Run or debug the tests to check them.


Calculator.cs

using System;
namespace TempxUnitTestPrj
{
    public interface ICalculator
    {
        int Add(int a, int b);
    }
    public class Calculator2 : ICalculator
    {
        public int Add(int a, int b) => a + b;
    }

    public static class Calculator
    {
        public static int Add(int a, int b) => a + b;
        public static int Subtract(int a, int b) => a - b;
    }
}






CalculatorTests.cs

using Xunit;
namespace TempxUnitTestPrj
{
    public class CalculatorTests
    {
        [Fact]
        public void Add_ReturnsCorrectSum()
        {
            int result = Calculator.Add(2, 3);
            Assert.Equal(5, result);
        }

        [Fact]
        public void Subtract_ReturnsCorrectDifference()
        {
            int result = Calculator.Subtract(5, 3);
            Assert.Equal(2, result);
        }

        [Theory]
        [InlineData(2, 3, 5)]
        [InlineData(-1, 1, 0)]
        [InlineData(0, 0, 0)]
        public void Add_ReturnsCorrectSumTheory(int a, int b, int expected)
        {
            int result = Calculator.Add(a, b);
            Assert.Equal(expected, result);
        }
        [Fact]
        public void AssertionsExamples()
        {
            Assert.Equal(5, Calculator.Add(2, 3));      // Equality
            Assert.NotEqual(4, Calculator.Add(2, 3));  // Inequality
            Assert.True(5 > 3);                        // Boolean
            Assert.Null(null);                         // Null check
            int a = 0;
            Assert.Throws<DivideByZeroException>(() => { int x = 1 / a; }); // Exception
        }


    }
    public class CalculatorTests2
    {
        private readonly ICalculator _calculator;

        public CalculatorTests2()
        {
            _calculator = new Calculator2(); // Mock or actual instance
        }

        [Fact]
        public void Add_ReturnsCorrectSum()
        {
            Assert.Equal(5, _calculator.Add(2, 3));
        }
    }

    public class DatabaseFixture : IDisposable
    {
        public string ConnectionString { get; private set; }

        public DatabaseFixture()
        {
            // Initialize resources
            ConnectionString = "Server=localhost;Database=TestDb;";
        }

        public void Dispose()
        {
            // Cleanup resources
        }
    }

    public class DatabaseTests : IClassFixture<DatabaseFixture>
    {
        private readonly DatabaseFixture _fixture;

        public DatabaseTests(DatabaseFixture fixture)
        {
            _fixture = fixture;
        }

        [Fact]
        public void TestConnection()
        {
            Assert.NotNull(_fixture.ConnectionString);
        }
    }


}






Create ASP.NET Core Web API (.NET 9) Project Name: EmployeeApi
Template: ASP.NET Core Web API
Framework: .NET 9 (Preview)
Authentication: None
No HTTPs






Create folder Models
Class : Employee

namespace EmployeeApi.Models
{
    public class Employee
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Department { get; set; }
    }
}








Create folder Services
Interface : IEmployeeService

using EmployeeApi.Models;

namespace EmployeeApi.Services
{
    public interface IEmployeeService
    {
        List<Employee> GetAll();
        Employee? GetById(int id);
        void Add(Employee employee);
    }
}




In Services
Create class : EmployeeService 



using EmployeeApi.Models;

namespace EmployeeApi.Services
{
    public class EmployeeService : IEmployeeService
    {
        private readonly List<Employee> _employees = new()
        {
            new Employee { Id = 1, Name = "Alice", Department = "HR" },
            new Employee { Id = 2, Name = "Bob", Department = "IT" }
        };

        public List<Employee> GetAll() => _employees;

        public Employee? GetById(int id) => _employees.FirstOrDefault(e => e.Id == id);

        public void Add(Employee employee)
        {
            employee.Id = _employees.Max(e => e.Id) + 1;
            _employees.Add(employee);
        }
    }
}






Create Web API Controller in controllers: 
EmployeeController

using EmployeeApi.Models;
using EmployeeApi.Services;
using Microsoft.AspNetCore.Mvc;

namespace EmployeeApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class EmployeeController : ControllerBase
    {
        private readonly IEmployeeService _service;

        public EmployeeController(IEmployeeService service)
        {
            _service = service;
        }

        [HttpGet]
        public IActionResult GetAll() => Ok(_service.GetAll());

        [HttpGet("{id}")]
        public IActionResult GetById(int id)
        {
            var emp = _service.GetById(id);
            if (emp == null) return NotFound();
            return Ok(emp);
        }

        [HttpPost]
        public IActionResult Add(Employee employee)
        {
            _service.Add(employee);
            return CreatedAtAction(nameof(GetById), new { id = employee.Id }, employee);
        }
    }
}







Register Service in Program.cs:

builder.Services.AddScoped<IEmployeeService, EmployeeService>();






























