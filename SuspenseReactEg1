npm install --save-dev webpack @babel/plugin-syntax-dynamic-import





math.js

// math.js
export function add(a, b) {
  return a + b;
}




index.js

// index.js
import ReactDOM from "react-dom/client";
import { add } from "./math";
function App(){
  return(
    <h1>Add Called from math.js: <br/>
    {add(16, 26)}
    </h1>
  );
}
const root = ReactDOM.createRoot(document.getElementById('root')); 
root.render(<App />);





Bundle : index.js



import ReactDOM from "react-dom/client";
function add(a, b) {
  return a + b;
}

function App(){
  return(
    <h1>No Add Called from math.js: <br/>
     {add(16, 26)}
    </h1>
  );
}
const root = ReactDOM.createRoot(document.getElementById('root')); 
root.render(<App />);









Code Splitting : index.js

//index.js
import ReactDOM from "react-dom/client";
function App(){
  return(
    <h1>Add Called from math.js: <br/>
     {require('./math').add(16, 26)}
    </h1>
  );
}
const root = ReactDOM.createRoot(document.getElementById('root')); 
root.render(<App />);








//index.js
import ReactDOM from "react-dom/client";
import { useState } from "react";

function App(){
    const [a,setA] =useState(0);
    var clicked = ()=>{setA(require('./math').add(16, 26)); }
  return(
    <h1>Add Called from math.js: <br/>
    <button onClick={clicked}> click</button>
    {a}
    </h1>
  );
}
const root = ReactDOM.createRoot(document.getElementById('root')); 
root.render(<App />);







React.Lazy:

React.lazy: math.js


function add(a, b) {
    return a + b;
  }
export default function Math(){
  return (<h1>{add(16, 26)}</h1>);
}



React.lazy : index.js:

//index.js
import ReactDOM from "react-dom/client";
//import Math from "./math";
import React from "react";
//import {lazy} from "react";
const Math = React.lazy(() => import('./math'));
//const Math = lazy(() => import('./math'));
function App(){
  return(
    <h1>Add Called from math.js: <br/>
     <Math/>
    </h1>
  );
}
const root = ReactDOM.createRoot(document.getElementById('root')); 
root.render(<App />);












Suspense: math.js

function add(a, b) {
    return a + b;
  }
export default function Math(){
  return (<h1>Addition result of add(16,26) is: {add(16, 26)}</h1>);
}



Suspense: Sub.js


function minus(a, b) {
    return a - b;
  }
export default function Sub(){
  return (<h1>Subtraction result of minus(26,16) is: {minus(26, 16)}</h1>);
}





Suspense : index.js


//index.js
import ReactDOM from "react-dom/client";
import React from "react";
const Math = React.lazy(() =>
  new Promise(resolve => {
    setTimeout(() => resolve(import('./math')), 2000); // Delay for 2 seconds
  })
);
const Sub = React.lazy(() =>
  new Promise(resolve => {
    setTimeout(() => resolve(import('./Sub')), 2000); // Delay for 2 seconds
  })
);
function App() {
  return (
    <div>
      <h1>Add Called from math.js:</h1>
      <React.Suspense fallback={<div>Loading...</div>}>
        <section>
          <Math />
          <Sub />
        </section>
      </React.Suspense>
    </div>
  );
}
const root = ReactDOM.createRoot(document.getElementById('root')); 
root.render(<App />);




















