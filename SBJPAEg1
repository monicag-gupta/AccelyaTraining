Postgresql

CREATE TABLE IF NOT EXISTS employeetbl (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    department VARCHAR(50),
    designation VARCHAR(50),
    salary NUMERIC(10,2),
    joining_date DATE
);



INSERT INTO employeetbl (name, department, designation, salary, joining_date) VALUES
('Alice Johnson', 'Engineering', 'Software Engineer', 75000.00, '2020-01-15'),
('Bob Smith', 'Engineering', 'Senior Developer', 90000.00, '2018-03-20'),
('Charlie Kim', 'HR', 'HR Manager', 65000.00, '2019-07-01'),
('Diana Patel', 'Finance', 'Accountant', 60000.00, '2021-02-12'),
('Ethan Lee', 'Marketing', 'Marketing Analyst', 58000.00, '2020-11-05'),
('Fiona Brown', 'Sales', 'Sales Executive', 55000.00, '2021-04-18'),
('George Clark', 'Engineering', 'DevOps Engineer', 85000.00, '2017-09-09'),
('Hannah Wright', 'Finance', 'Financial Analyst', 70000.00, '2022-01-01'),
('Ian Scott', 'Engineering', 'Backend Developer', 80000.00, '2019-10-10'),
('Jane Evans', 'Engineering', 'Frontend Developer', 79000.00, '2020-12-03'),
('Kyle Murphy', 'Support', 'Support Engineer', 50000.00, '2021-08-23'),
('Laura James', 'HR', 'Recruiter', 54000.00, '2018-06-14'),
('Mike Lewis', 'Engineering', 'Tech Lead', 98000.00, '2016-05-11'),
('Nina Allen', 'Engineering', 'QA Engineer', 62000.00, '2021-03-30'),
('Oscar Price', 'Finance', 'Senior Accountant', 74000.00, '2017-04-28'),
('Paula Adams', 'Marketing', 'Content Strategist', 59000.00, '2022-02-07'),
('Quincy Baker', 'Sales', 'Sales Manager', 72000.00, '2019-09-19'),
('Rachel Carter', 'Support', 'Customer Success Manager', 67000.00, '2018-12-01'),
('Steve Diaz', 'Engineering', 'Site Reliability Engineer', 88000.00, '2020-07-17'),
('Tina Edwards', 'Finance', 'Controller', 94000.00, '2016-08-22'),
('Umar Foster', 'Engineering', 'Cloud Engineer', 86000.00, '2021-06-05'),
('Vera Graham', 'HR', 'Benefits Coordinator', 61000.00, '2020-10-10'),
('Will Harris', 'Engineering', 'Mobile Developer', 77000.00, '2019-11-30'),
('Xander Iqbal', 'Engineering', 'Security Engineer', 89000.00, '2020-09-21'),
('Yara Jenkins', 'Marketing', 'Social Media Manager', 63000.00, '2022-03-15'),
('Zane King', 'Sales', 'Account Executive', 71000.00, '2021-01-25'),
('Alan Morgan', 'Engineering', 'AI Engineer', 95000.00, '2021-05-16'),
('Bella Novak', 'Engineering', 'ML Engineer', 94000.00, '2022-04-10'),
('Caleb Owen', 'Engineering', 'Data Engineer', 91000.00, '2020-06-18'),
('Dana Parker', 'Engineering', 'Data Scientist', 97000.00, '2019-02-22'),
('Eli Quinn', 'Engineering', 'Software Architect', 100000.00, '2015-11-12'),
('Faith Rivera', 'Engineering', 'Junior Developer', 65000.00, '2022-01-05'),
('Gavin Stone', 'Support', 'Support Manager', 62000.00, '2018-03-08'),
('Hailey Turner', 'HR', 'HR Coordinator', 58000.00, '2020-07-21'),
('Ivan Underwood', 'Engineering', 'Systems Engineer', 83000.00, '2019-05-26'),
('Jade Valdez', 'Sales', 'Territory Manager', 74000.00, '2021-12-02'),
('Karan White', 'Marketing', 'Email Marketing Specialist', 61000.00, '2022-06-10'),
('Lena Xiong', 'Finance', 'Junior Analyst', 56000.00, '2021-10-19'),
('Mason Young', 'Engineering', 'Automation Engineer', 81000.00, '2018-01-28'),
('Nora Zimmerman', 'Engineering', 'Embedded Systems Engineer', 87000.00, '2019-08-03');







SB Starter Project:

Project name: EmployeeManager
Package name: com.employee
Spring Boot version: 3.2.x
Dependencies:
Spring Web
Spring Data JPA
PostgreSQL Driver


com.employee
├── controller
│   └── EmployeeController.java
├── service
│   └── EmployeeService.java
├── repository
│   └── EmployeeRepository.java
├── model
│   └── Employeetbl.java
├── EmployeeManagerApplication.java






spring.application.name=EmployeeManager

# PostgreSQL connection
spring.datasource.url=jdbc:postgresql://localhost:5432/tempdb
spring.datasource.username=postgres
spring.datasource.password=root

# Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


# Server
server.port=8080








package com.employee.model;

import jakarta.persistence.*;
import java.time.LocalDate;

@Entity
public class Employeetbl {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	private String name;
	private String department;
	private String designation;
	private double salary;
	private LocalDate joiningDate;
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getDepartment() {
		return department;
	}
	public void setDepartment(String department) {
		this.department = department;
	}
	public String getDesignation() {
		return designation;
	}
	public void setDesignation(String designation) {
		this.designation = designation;
	}
	public double getSalary() {
		return salary;
	}
	public void setSalary(double salary) {
		this.salary = salary;
	}
	public LocalDate getJoiningDate() {
		return joiningDate;
	}
	public void setJoiningDate(LocalDate joiningDate) {
		this.joiningDate = joiningDate;
	}

	
}






package com.employee.repository;

import com.employee.model.Employeetbl;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;

public interface EmployeeRepository extends JpaRepository<Employeetbl, Long> {
    Page<Employeetbl> findByDepartmentContainingIgnoreCase(String department, Pageable pageable);
}










package com.employee.service;

import com.employee.model.Employeetbl;
import com.employee.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.*;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository repo;

    public Employeetbl create(Employeetbl employee) {
        return repo.save(employee);
    }

    public Optional<Employeetbl> getById(Long id) {
        return repo.findById(id);
    }

    public Page<Employeetbl> getAll(int page, int size, String sortField) {
        Pageable pageable = PageRequest.of(page, size, Sort.by(sortField).ascending());
        return repo.findAll(pageable);
    }

    public Page<Employeetbl> filterByDepartment(String department, int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        return repo.findByDepartmentContainingIgnoreCase(department, pageable);
    }

    public Employeetbl update(Long id, Employeetbl emp) {
        emp.setId(id);
        return repo.save(emp);
    }

    public void delete(Long id) {
        repo.deleteById(id);
    }
}







package com.employee.controller;

import com.employee.model.Employeetbl;
import com.employee.service.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@RestController
@RequestMapping("/api/employees")
public class EmployeeController {

    @Autowired
    private EmployeeService service;

    @PostMapping
    public Employeetbl create(@RequestBody Employeetbl emp) {
        return service.create(emp);
    }

    @GetMapping("/{id}")
    public Optional<Employeetbl> getById(@PathVariable Long id) {
        return service.getById(id);
    }

    @GetMapping
    public Page<Employeetbl> getAll(
        @RequestParam(defaultValue = "0") int page,
        @RequestParam(defaultValue = "5") int size,
        @RequestParam(defaultValue = "id") String sort
    ) {
        return service.getAll(page, size, sort);
    }

    @GetMapping("/filter")
    public Page<Employeetbl> filterByDepartment(
        @RequestParam String department,
        @RequestParam(defaultValue = "0") int page,
        @RequestParam(defaultValue = "5") int size
    ) {
        return service.filterByDepartment(department, page, size);
    }

    @PutMapping("/{id}")
    public Employeetbl update(@PathVariable Long id, @RequestBody Employeetbl emp) {
        return service.update(id, emp);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        service.delete(id);
    }
}











