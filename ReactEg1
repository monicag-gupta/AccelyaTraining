npm install -g create-react-app


If error pops us for npm install,
Then run:

npm cache clean --force

Then try the npm install.










npx create-react-app my-react-app







cd my-react-app





npm start















Example 1 : JSX: index.js : 
import React from 'react';
import ReactDOM from 'react-dom/client';
const myElement = <h1>JSX is cool!</h1>;
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(myElement);



Example 2 : Without JSX:
import React from 'react';
import ReactDOM from 'react-dom/client';
const myElement = React.createElement('h1', {}, 'I do not use JSX!');
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(myElement);









import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const myElement = <h1>React is {5 + 5} times better with JSX</h1>;
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(myElement);







import logo from './logo.svg';
import './App.css';

function App() {
  return (
    <>
      <h1>Hello World</h1> 
    </>
  );
}

export default App;







import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

// const myElement = <h1>React is {5 + 5} times better with JSX</h1>;
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App/>);











import logo from './logo.svg';
import './App.css';

function App2(){
  return (
    <>
    <h1>This is the child of APP</h1>
    </>
  );
}

function App() {
  return (
    <>
      <h1>Hello World</h1> 
      <App2/>
      <h2>Hello again!</h2>
    </>
  );
}

export default App;









import React from "react";
import ReactDOM from 'react-dom/client';
let i = 1;
const element = (
	<h1>{i == 1 ? "Hello World!" : "False!"} </h1>
);
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(element);








App.js

import React, { Component } from 'react';  
class App extends Component{  
   render(){  
     var myStyle = {  
         fontSize: 80,  
         fontFamily: 'Courier',  
         color: '#003300'  
      }  
      return (  
         <div>  
            <h1 style = {myStyle}>Hello World!</h1> 
         </div>  
      );  
   }  
}  
export default App; 





import React, { Component } from 'react';  
function App(){  
    
     var myStyle = {  
         fontSize: 80,  
         fontFamily: 'Courier',  
         color: '#003300'  
      }  
      return (  
         <div>  
            <h1 style = {myStyle}>Hello World!</h1> 
		        {/* This is a comment in JSX */}   

         </div>  
      );  
   }  
 
export default App; 





import React, { Component } from 'react';  
class  App extends Component{  
    render(){
     var myStyle = {  
         fontSize: 80,  
         fontFamily: 'Courier',  
         color: '#003300'  
      }  
      return (  
         <div>  
            <h1 style = {myStyle}>Hello World!</h1> 
                    {/* This is a comment in JSX */}   

         </div>  
      );  
   }  
  }
 
export default App; 








import React from "react";
import ReactDOM from 'react-dom/client';
import App from "./App";
let i = 1;
const element = (
	<h1>{i == 1 ? "Hello World!" : "False!"} </h1>
);
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App/>);








import React from 'react';
import ReactDOM from 'react-dom/client';
class Car extends React.Component {
  constructor() {
    super();
    this.state = {color: "red"};
  }
  render() {
    return <h2>I am a {this.state.color} Car!</h2>;
  }
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);







import React from 'react';
import ReactDOM from 'react-dom/client';
class Car extends React.Component {
  constructor() {
    super();
    this.state = {myKey: "red"};
  }
  render() {
    var styles={color:this.state.myKey}
    return <h2 style={styles}>I am a {this.state.myKey} Car!</h2>;
  }
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);








import React from 'react';
import ReactDOM from 'react-dom/client';

function Car(props) {
  return <h2>I am a {props.color} Car!
<td><Wheels type="Titanium Alloy"></td></h2>;


}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car color="red"/>);











Solution:

index.js:

import React,{Component} from 'react';
import ReactDOM from 'react-dom/client';
import Car from './Components/Car';



const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);




Components/Seats.js:

import React,{Component} from 'react';

export default class Seats extends  Component{
    render(){return (
        <tr>
            <td>Seats : 2 Single Seats, 1 three Seater Seat </td>
            <td>3</td>
        </tr>
    );
    }
  }
  




Components/Engine.js:

import React,{Component} from 'react';

export default class Engine extends  Component{
    render(){return <tr><td>Engine : Strong, super fast</td><td>1</td></tr>;}
  }
  



Components/Wheels.js:

import React,{Component} from 'react';

export default class Wheels extends  Component{
    render(){return <tr><td>Wheels: Titanium Alloy</td><td>4</td></tr>;}
  }
  




Components/Car.js:

import React,{Component} from 'react';
import Engine from './Engine';
import Wheels from './Wheels';
import Seats from './Seats';

export default class Car extends  Component{
    render(){
    return (
      <>
        <h2>I am a Car!<br/> Parts: </h2>
        <table border="1">
          <tr><th>Parts</th><th>NoOfParts</th></tr>
          <Engine />
          <Wheels />
          <Seats/>
        </table>
      </>
    );
  }
  }

















import React from 'react';
import ReactDOM from 'react-dom/client';
class Car extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return <h2>I am a {this.props.model}!</h2>;
  }
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car model="Mustang"/>);
















Four files with four Components:
Wheels, Seats, Engine
Car Component:
I am a CAR!
Parts: (Table using the other components)




Parts
NoOfParts
Wheels: Titanium Alloy
4
Seats : 2 Single Seats, 1 three Seater Seat
3
Engine : Strong, super fast
1














import React, { Component } from 'react';
class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0
    };
  }
  increment = () => {
    this.setState({ count: this.state.count + 1 });
  };
  render() {
    return (
      <div>
        <h2>Count: {this.state.count}</h2>
        <button onClick={this.increment}>Increment</button>
      </div>
    );
  }
}
export default App;







import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App/>);










import React from 'react';
import ReactDOM from 'react-dom/client';
class Car extends React.Component {
  constructor(props) {
    super(props);
    this.state = { model: "Mustang", color: "red", year: 1964};
  }
  changeColor = () => { this.setState({color: "blue"}); }
  changeColor2 = () => { this.setState({color: "red"}); }
  render() {
    return (
      <div>
        <h1>My {this.props.brand}</h1>
        <p> It is a {this.state.color}&nbsp; {this.props.brand=="Ford"?this.state.model:"Maruti Suzuki"} from {this.state.year}. </p>
        <button type="button" onClick={this.changeColor}>Change color to blue</button>
        <button type="button" onClick={this.changeColor2}>Change color to Red</button>
      </div>
    );
  }
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car brand="Ford"/>);












import React from 'react';
import ReactDOM from 'react-dom/client';
class Car extends React.Component {  
  constructor(props) {  
     super(props);  
     this.state = {brand: "Ford"};  
     this.changeState = this.changeState.bind(this)  
  }    
  render() {  
     return (    <div>  
            <h1>ReactJS component's Lifecycle</h1>  
            <h3>My Car is a {this.state.brand}</h3>  
            <button onClick = {this.changeState}>Click Here!</button>          
        </div>    );  
  }  
  componentWillMount() {  console.log('Component Will MOUNT!');   }  
  componentDidMount() {   console.log('Component Did MOUNT!');  }  
  changeState(){  this.setState({brand:"Mustang!!- Its a great Car Brand."});   }  
  componentWillReceiveProps(newProps) {   console.log('Component Will Recieve Props!');  }  
  shouldComponentUpdate(newProps, newState) {   return true;    }  
  componentWillUpdate(nextProps, nextState) {  console.log('Component Will UPDATE!');  }  
  componentDidUpdate(prevProps, prevState) {  console.log('Component Did UPDATE!');  }  
  componentWillUnmount() {  console.log('Component Will UNMOUNT!');  }  
}  
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car/>);













import React from 'react';
import ReactDOM from 'react-dom/client';
class Car extends React.Component {  
  constructor(props) {  
     super(props);  
     this.state = {brand: "Ford"};  
     this.changeState = this.changeState.bind(this)  
  }    
  render() {  
     return (    
         <div>  
            <h1>ReactJS component's Lifecycle with property: {this.props.name}</h1>  
            <h3>My Car is a {this.state.brand}</h3>  
            <button onClick = {this.changeState}>Click Here!</button>          
        </div>    );  
  }  
  //componentWillMount() {  console.log('Component Will MOUNT!');   }  
  componentDidMount() {   console.log('Component Did MOUNT!');  }  
  changeState(){  this.setState({brand:"Mustang!!- Its a great Car Brand."});   }  
  //componentWillReceiveProps(newProps) {   console.log('Component Will Recieve Props!');  }  
  shouldComponentUpdate(newProps, newState) {   console.log('Component Prop/State changed or not? true'); return true;    }  
  //componentWillUpdate(nextProps, nextState) {  console.log('Component Will UPDATE!');  }  
  componentDidUpdate(prevProps, prevState) {  console.log('Component Did UPDATE!');  }  
  componentWillUnmount() {  console.log('Component Will UNMOUNT!');  }  
}  
class Cars extends React.Component{
   constructor(){
      super();
      this.state={x:false}
      this.btn=this.btn.bind(this);
   }
   btn(){
      //document.getElementById("car").innerText="<Car name='MyCar'/>";
      this.setState({ x:!this.state.x });
   }
   render(){
  // btn = ()=>"<Car name='MyCar'/>";
   return (
   <div>
   <button onClick={this.btn}>Click to (un)load Car</button>
   <div>{this.state.x && <Car name='MyCar'/>}</div>
   </div>
   );
}
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Cars/>);









import React from 'react';
import ReactDOM from 'react-dom/client';
class Car extends React.Component {  
    constructor(props) {  
        super(props);  
        this.updateSubmit = this.updateSubmit.bind(this);  
        this.input1 = React.createRef();  
        this.input2 = React.createRef(); 
    }  
    updateSubmit(event) {  
        var entry = this.input1.current.value + " and CompanyName: " + this.input2.current.value;
        alert('You have entered the required Brand: '+ entry + ' successfully.');  
        event.preventDefault();  
    }  
    render() {  
      return (  
        <form onSubmit={this.updateSubmit}>  
          <h1>Uncontrolled Form Example</h1>  
          <br/><label>Enter Brand Name: <input type="text" ref={this.input1} />  </label>  
          <br/><label>Enter CompanyName: <input type="text" ref={this.input2} /> </label>  
          <br/><input type="submit" value="Submit" />  
        </form>  
      );  
    }  
  }  

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);













import React from 'react';
import ReactDOM from 'react-dom/client';
class Car extends React.Component {  
    constructor(props) {  
        super(props);  
        this.state = {value1: '',value2: ''};  
        this.handleChange1 = this.handleChange1.bind(this); 
        this.handleChange2 = this.handleChange2.bind(this);  
        this.handleSubmit = this.handleSubmit.bind(this);  
    }  
    handleChange1(event) { this.setState({value1: event.target.value});  }  
    handleChange2(event) { this.setState({value2: event.target.value});  }  
    handleSubmit(event) {  
        alert('You have submitted the input successfully: Brand: ' + this.state.value1+ " Company Name: " + this.state.value2);  
        event.preventDefault();  
    }  
    render() {  
        return ( <form onSubmit={this.handleSubmit}>  
              <h1>Controlled Form Example</h1>  
              <br/><label>Brand: <input type="text" value={this.state.value1} onChange={this.handleChange1} />  </label>  
              <br/><label>Company: <input type="text" value={this.state.value2} onChange={this.handleChange2} />  </label>  
              <br/><input type="submit" value="Submit" />  
           </form> );  
    }    }   
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);










import React, { useState } from "react";
import ReactDOM from "react-dom/client";
function Car() {
  const [color, setColor] = useState("red");
  return (
    <>
      <h1>My Car color is {color}!</h1>
      <button type="button" onClick={() => setColor("blue")}>Blue</button>
      <button type="button" onClick={() => setColor("red")}>Red</button>
      <button type="button" onClick={() => setColor("pink")}>Pink</button>
      <button type="button" onClick={() => setColor("green")}>Green</button>
    </>
  );
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);












import React, { useState } from "react";
import ReactDOM from "react-dom/client";
function App() {
  const [click, setClick] = useState(0);
  return (
      <div>
          <p>You've clicked {click} times!</p>
          <p>The number of times you have clicked
              is {click % 2 == 0 ? 'even!' : 'odd!'}</p>           
          <button onClick={() => setClick(click => click + 1)}>
              Click me
          </button>
      </div>
  );
}
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
    <React.StrictMode><App /></React.StrictMode>
);







import { useState } from "react";
import ReactDOM from "react-dom/client";
function Car() {
  const [car, setCar] = useState({brand: "Ford", model: "Mustang", year: "1964", color: "red"});
  const updateColor1 = () => {
    setCar(previousState => { return { ...previousState, color: "blue" } });
  }
  const updateColor2 = () => {
    setCar(previousState => { return { ...previousState, color: "red" } });
  }
  return (
    <>
      <h1>My {car.brand}</h1>
      <p> It is a {car.color} {car.model} from {car.year}. </p>
      <button type="button" onClick={updateColor1}>Blue</button>
      <button type="button" onClick={updateColor2}>Red</button>
    </>
  )
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);










// useEffect is defined here
import { useState, useEffect } from "react";

function App() {
	const [count, setCount] = useState(0);
	useEffect(() => {
		document.title = `You clicked ${count} times`;
	}, [count]);

	return (
		<div>
			<button onClick={() => setCount((prevCount) => prevCount + 1)}>
				Click {count} times{" "}
			</button>
		</div>
	);
}
export default App;






import { useState } from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App/>);










import { useState, useEffect } from "react";
import ReactDOM from "react-dom/client";
function App() {
  const [count, setCount] = useState(0);
  useEffect(() => {
    setTimeout(() => {
      setCount((count) => count + 1);
    }, 1000);
  });
  return <h1>I've rendered {count} times!</h1>;
}


export default App;






import { useState, useEffect } from "react";
import ReactDOM from "react-dom/client";
function App() {
  const [count, setCount] = useState(0);
 useEffect(() => {
    setTimeout(() => {
      setCount((count) => count + 1);
    }, 1000);
  }, []); // <- add empty brackets here

  return <h1>I've rendered {count} times!</h1>;
}


export default App;













import { useState, useEffect } from "react";
import ReactDOM from "react-dom/client";
function App() {

  const [count, setCount] = useState(0);
  useEffect(() => {
    let timer = setTimeout(() => {
        setCount((count) => count + 1);
    }, 1000);
    return () => clearTimeout(timer)
  }, []);
  return <h1>I've rendered {count} times!</h1>;
}




export default App;











import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom/client';

function Car({ name }) {
  const [brand, setBrand] = useState("Ford");

  // Simulates componentDidMount
  useEffect(() => {
    console.log('Component Did MOUNT!');
  }, []);

  // Simulates componentDidUpdate for 'brand' state
  useEffect(() => {
    if (brand !== "Ford") {
      console.log('Component Did UPDATE!');
    }
  }, [brand]);

  // Simulates componentWillUnmount
  useEffect(() => {
    return () => {
      console.log('Component Will UNMOUNT!');
    };
  }, []);

  const changeState = () => {
    setBrand("Mustang!! - Its a great Car Brand.");
  };

  return (
    <div>
      <h1>ReactJS component's Lifecycle with property: {name}</h1>
      <h3>My Car is a {brand}</h3>
      <button onClick={changeState}>Click Here!</button>
    </div>
  );
}

function Cars() {
  const [showCar, setShowCar] = useState(false);

  const toggleCar = () => {
    setShowCar(prev => !prev);
  };

  return (
    <div>
      <button onClick={toggleCar}>Click to (un)load Car</button>
      <div>{showCar && <Car name="MyCar" />}</div>
    </div>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Cars />);
















import React, { useState } from 'react';

function App() {
  const [name, setName] = useState('');

  const handleChange = (e) => {
    setName(e.target.value);  // Updates state when input changes
  };

  const handleSubmit = (e) => {
    e.preventDefault();  // Prevents page refresh
    alert(`Submitted Name: ${name}`);
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>Enter Name: </label>
      <input 
        type="text"
        value={name}          // Controlled by state
        onChange={handleChange} // Updates state
      />
      <button type="submit">Submit</button>
    </form>
  );
}

export default App;




















