
Open Visual Studio 2022 (Preview) â†’ Create ASP.NET Core Web API
Choose:
Framework: .NET 9.0
Enable OpenAPI
Use Controllers
Install EF Core PostgreSQL Packages
Open Package Manager Console and run:
Install-Package Npgsql.EntityFrameworkCore.PostgreSQL
Install-Package Microsoft.EntityFrameworkCore.Tools
Install-Package Swashbuckle.AspNetCore
Or use NuGet GUI to install:
Npgsql.EntityFrameworkCore.PostgreSQL
Microsoft.EntityFrameworkCore.Tools
Swashbuckle.AspNetCore




namespace WebAPI_EF.Models;

public class Employee
{
    public int Id { get; set; } // Primary Key
    public string Name { get; set; }
    public string Department { get; set; }
}






using Microsoft.EntityFrameworkCore;
using WebAPI_EF.Models;

namespace WebAPI_EF.Data;

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options)
        : base(options) { }

    public DbSet<Employee> employees { get; set; }
}





appsettings.json : add: 

"ConnectionStrings": {
    "PostgresConnection": "Host=localhost;Port=5432;Database=training;Username=postgres;Password=root",
  },




{
  "ConnectionStrings": {
    "PostgresConnection": "Host=localhost;Port=5432;Database=training;Username=postgres;Password=root",
  },
    "Logging": {
      "LogLevel": {
        "Default": "Information",
        "Microsoft.AspNetCore": "Warning"
      }
    },
    "AllowedHosts": "*"
  }








Program.cs

using Microsoft.EntityFrameworkCore;
using WebAPI_EF.Data;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi
//builder.Services.AddOpenApi();

builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("PostgresConnection")));
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    //app.MapOpenApi();
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseAuthorization();

app.MapControllers();

app.Run();







Run EF Migrations
In Package Manager Console:
Add-Migration InitialCreate
Update-Database
EF will create the Employees table in PostgreSQL using Code First.




drop table if exists Employees;


CREATE TABLE Employees (
    Id SERIAL PRIMARY KEY,
    Name TEXT,
    Department TEXT
);

Insert into Employees(name, department) values ('John','IT')
, ('Jane','IT')
, ('Harry','HR')
, ('Potter','IT')
, ('Bob','Finance');







using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using WebAPI_EF.Data;
using WebAPI_EF.Models;

namespace WebAPI_EF.Controllers;

[ApiController]
[Route("api/[controller]")]
public class EmployeeController : ControllerBase
{
    private readonly AppDbContext _context;

    public EmployeeController(AppDbContext context)
    {
        _context = context;
    }

    [HttpGet]
    public async Task<ActionResult<IEnumerable<Employee>>> GetAll()
    {
        return await _context.employees.ToListAsync();
    }

    [HttpGet("{id}")]
    public async Task<ActionResult<Employee>> GetById(int id)
    {
        var emp = await _context.employees.FindAsync(id);
        if (emp == null) return NotFound();
        return emp;
    }

    [HttpPost]
    public async Task<ActionResult<Employee>> Create(Employee emp)
    {
        _context.employees.Add(emp);
        await _context.SaveChangesAsync();
        return CreatedAtAction(nameof(GetById), new { id = emp.id }, emp);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> Update(int id, Employee emp)
    {
        if (id != emp.id) return BadRequest();
        _context.Entry(emp).State = EntityState.Modified;
        await _context.SaveChangesAsync();
        return NoContent();
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> Delete(int id)
    {
        var emp = await _context.employees.FindAsync(id);
        if (emp == null) return NotFound();
        _context.employees.Remove(emp);
        await _context.SaveChangesAsync();
        return NoContent();
    }
}






http://localhost:5243/swagger/index.html





PRj2 with Linq:


In Postgresql

public class Employees
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Department { get; set; }
    public decimal Salary { get; set; }
    public DateTime JoiningDate { get; set; }
}


INSERT INTO "Employees" ("Name", "Department", "Salary", "JoiningDate") VALUES
('John Doe', 'HR', 50000, '2023-01-15 09:00:00'),
('Jane Smith', 'IT', 75000, '2022-12-01 10:30:00'),
('Alice Lee', 'Finance', 62000, '2021-06-10 14:00:00'),
('Bob Brown', 'IT', 70000, '2022-08-05 11:00:00'),
('Carol Ray', 'HR', 52000, '2023-02-20 13:15:00');

INSERT INTO "Employees" ("Name", "Department", "Salary", "JoiningDate") VALUES
('Emily Carter', 'Finance', 68000, '2021-05-10 09:00:00'),
('David Wilson', 'Marketing', 55000, '2022-03-12 10:00:00'),
('Sophia Green', 'IT', 78000, '2023-04-18 11:00:00'),
('Michael Young', 'HR', 53000, '2023-06-21 08:45:00'),
('Olivia Brown', 'Finance', 60000, '2020-11-29 13:30:00'),
('Daniel Martinez', 'IT', 72000, '2022-07-10 09:30:00'),
('Grace Kim', 'Marketing', 58000, '2023-01-17 14:15:00'),
('Anthony Clark', 'Finance', 61000, '2021-10-25 12:00:00'),
('Isabella Adams', 'HR', 51000, '2022-09-30 10:45:00'),
('Liam Thompson', 'IT', 76000, '2023-02-11 09:00:00');







SELECT * FROM Employees;









