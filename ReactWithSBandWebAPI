PostgreSQL Admin:


create database training;

CREATE TABLE EmpTbl (
    Id SERIAL PRIMARY KEY,
    Name VARCHAR(100),
    Department VARCHAR(100)
);




INSERT INTO EmpTbl (Name, Department) VALUES ('Alice', 'IT');
INSERT INTO EmpTbl (Name, Department) VALUES ('Bob', 'HR');
INSERT INTO EmpTbl (Name, Department) VALUES ('Charlie', 'Finance');
INSERT INTO EmpTbl (Name, Department) VALUES ('Diana', 'IT');
INSERT INTO EmpTbl (Name, Department) VALUES ('Edward', 'Sales');
INSERT INTO EmpTbl (Name, Department) VALUES ('Fiona', 'HR');
INSERT INTO EmpTbl (Name, Department) VALUES ('George', 'Finance');
INSERT INTO EmpTbl (Name, Department) VALUES ('Hannah', 'Sales');
INSERT INTO EmpTbl (Name, Department) VALUES ('Ian', 'IT');
INSERT INTO EmpTbl (Name, Department) VALUES ('Jenny', 'Marketing');




select * from Emptbl;








.Net Web API Project

Create Project
File → New → Project → ASP.NET Core Web API : WebAPI_EF_Prj
Choose .NET 9 framework
Enable Swagger ✅

Do not use HTTPS (if your company has certificate for SSL, then install the certificate for the current system and have the project with https)




NuGet Packages

Npgsql.EntityFrameworkCore.PostgreSQL
Microsoft.EntityFrameworkCore.Tools
Swashbuckle.AspNetCore




  using System.ComponentModel.DataAnnotations.Schema;

    namespace WebAPI_EF_Prj.Models
    {
        [Table("emptbl")]
        public class EmpTbl
        {
            public int id { get; set; }
            public string name { get; set; }
            public string department { get; set; }
        }

    }






using Microsoft.EntityFrameworkCore;
using WebAPI_EF_Prj.Models;

namespace WebAPI_EF_Prj.Data
{
    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

        public DbSet<EmpTbl> EmpTbls { get; set; }
    }

}





using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using WebAPI_EF_Prj.Data;
using WebAPI_EF_Prj.Models;

namespace WebAPI_EF_Prj.Controllers
{
    [EnableCors("AllowAll")]

    [Route("api/[controller]")]
    [ApiController]
    public class EmpTblController : ControllerBase
    {
        private readonly AppDbContext _context;
        public EmpTblController(AppDbContext context) => _context = context;

        [HttpGet]
        public async Task<ActionResult<IEnumerable<EmpTbl>>> GetAll() =>
            await _context.EmpTbls.ToListAsync();

        [HttpGet("{id}")]
        public async Task<ActionResult<EmpTbl>> GetById(int id)
        {
            var emp = await _context.EmpTbls.FindAsync(id);
            return emp == null ? NotFound() : emp;
        }

        [HttpPost]
        public async Task<ActionResult<EmpTbl>> Create(EmpTbl emp)
        {
            _context.EmpTbls.Add(emp);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetById), new { id = emp.id }, emp);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, EmpTbl emp)
        {
            if (id != emp.id) return BadRequest();
            _context.Entry(emp).State = EntityState.Modified;
            await _context.SaveChangesAsync();
            return NoContent();
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            var emp = await _context.EmpTbls.FindAsync(id);
            if (emp == null) return NotFound();
            _context.EmpTbls.Remove(emp);
            await _context.SaveChangesAsync();
            return NoContent();
        }
    }
}





using Microsoft.EntityFrameworkCore;
using WebAPI_EF_Prj.Data;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();


// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi
builder.Services.AddOpenApi();

builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll",
        policy => policy.WithOrigins("http://localhost:3000")
                        .AllowAnyMethod()
                        .AllowAnyHeader());
});


var app = builder.Build();

app.UseCors("AllowAll");


// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    //app.MapOpenApi();
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseAuthorization();

app.MapControllers();

app.Run();






http://localhost:5234/swagger/index.html









Spring Starter Project
EmpService
com.sbprj

Artifact: EmpService
Dependencies:
Spring Web
Spring Data JPA
PostgreSQL Driver









application.properties


spring.application.name=EmpService


spring.datasource.url=jdbc:postgresql://localhost:5432/training
spring.datasource.username=postgres
spring.datasource.password=root

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

server.port=8080






package com.sbprj.model;public class EmpTbl

package com.sbprj.model;

import jakarta.persistence.*;

@Entity
@Table(name = "emptbl")
public class EmpTbl {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;

	private String name;
	private String department;

	// Constructors
	public EmpTbl() {
	}

	public EmpTbl(String name, String department) {
		this.name = name;
		this.department = department;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDepartment() {
		return department;
	}

	public void setDepartment(String department) {
		this.department = department;
	}

	// Getters and Setters
	// ...
}





package com.sbprj.repository;public interface EmpRepository


package com.sbprj.repository;


import org.springframework.data.jpa.repository.JpaRepository;
import com.sbprj.model.EmpTbl;

public interface EmpRepository extends JpaRepository<EmpTbl, Integer> {
}





package com.sbprj.controller;public class EmpController


package com.sbprj.controller;


import com.sbprj.model.EmpTbl;
import com.sbprj.repository.EmpRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;


@CrossOrigin(origins = "http://localhost:3000")

@RestController
@RequestMapping("/api/employees")
public class EmpController {

    @Autowired
    private EmpRepository empRepository;

    @GetMapping
    public List<EmpTbl> getAll() {
        return empRepository.findAll();
    }

    @GetMapping("/{id}")
    public EmpTbl getById(@PathVariable int id) {
        return empRepository.findById(id).orElse(null);
    }

    @PostMapping
    public EmpTbl create(@RequestBody EmpTbl emp) {
        return empRepository.save(emp);
    }

    @PutMapping("/{id}")
    public EmpTbl update(@PathVariable int id, @RequestBody EmpTbl updatedEmp) {
        Optional<EmpTbl> optionalEmp = empRepository.findById(id);
        if (optionalEmp.isPresent()) {
            EmpTbl emp = optionalEmp.get();
            emp.setName(updatedEmp.getName());
            emp.setDepartment(updatedEmp.getDepartment());
            return empRepository.save(emp);
        }
        return null;
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable int id) {
        empRepository.deleteById(id);
    }
}







Run as Maven clean, install, Spring boot run  : spring-boot:run

Check in Postman:
GET/POST/PUT/DELETE on http://localhost:8080/api/employees










